# Напишите программу, которой на вход подается последовательность чисел через пробел, а также запрашивается у пользователя любое число.
# В качестве задания повышенного уровня сложности можете выполнить проверку соответствия указанному в условии ввода данных.
# Далее программа работает по следующему алгоритму:
# Преобразование введённой последовательности в список
# Сортировка списка по возрастанию элементов в нем (для реализации сортировки определите функцию)
# Устанавливается номер позиции элемента, который меньше введенного пользователем числа, а следующий за ним больше или равен этому числу.
# При установке позиции элемента воспользуйтесь алгоритмом двоичного поиска, который был рассмотрен в этом модуле. Реализуйте его также отдельной функцией.
# Помните, что у вас есть числа, которые могут не соответствовать заданному условию.
# В этом случае необходимо вывести соответствующее сообщение

x = '1 3 5 6 50 2 15 999 3.5'
array = list(map(float, x.split()))
try:
    element = float(input('Введите число от 1 до 999: '))
except ValueError:
    print('Ошибка! Необходимо вводить только числа')
else:
    for i in range(len(array)):
        for j in range(len(array) - i - 1):
            if array[j] > array[j + 1]:
                array[j], array[j + 1] = array[j + 1], array[j]

    print('Отсортированный список чисел: ', array)

    left = float(array[0])
    right = float(array[-1])

    def binary_search(array, element, left, right):
        if left > right:  # если левая граница превысила правую,
            return False  # значит элемент отсутствует
        middle = (right + left) // 2  # находим середину
        if array[middle - 1] < element <= array[middle]:  # если элемент в середине,
            return [middle-1]  # возвращаем  индекс предыдущего элемента
        elif element < array[middle]:  # если элемент меньше элемента в середине
        # рекурсивно ищем в левой половине
            return binary_search(array, element, left, middle - 1)
        else:  # иначе в правой
            return binary_search(array, element, middle + 1, right)


    if element < left or element > right:
        print('Введенное Вами число не соответствует условию')
    else:
        print('Номер позиции элемента, который меньше введенного Вами числа ', binary_search(array, element, 0, len(array) - 1))
